// Code generated by go-swagger; DO NOT EDIT.

package instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexlb-client-go/models"
)

// ModifyReader is a Reader for the Modify structure.
type ModifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ModifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewModifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewModifyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewModifyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewModifyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewModifyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewModifyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewModifyOK creates a ModifyOK with default headers values
func NewModifyOK() *ModifyOK {
	return &ModifyOK{}
}

/* ModifyOK describes a response with status code 200, with default header values.

Modify Instance succeeded
*/
type ModifyOK struct {
	Payload *models.Instance
}

func (o *ModifyOK) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] modifyOK  %+v", 200, o.Payload)
}
func (o *ModifyOK) GetPayload() *models.Instance {
	return o.Payload
}

func (o *ModifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Instance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewModifyBadRequest creates a ModifyBadRequest with default headers values
func NewModifyBadRequest() *ModifyBadRequest {
	return &ModifyBadRequest{}
}

/* ModifyBadRequest describes a response with status code 400, with default header values.

ModifyBadRequest modify bad request
*/
type ModifyBadRequest struct {
	Payload *ModifyBadRequestBody
}

func (o *ModifyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] modifyBadRequest  %+v", 400, o.Payload)
}
func (o *ModifyBadRequest) GetPayload() *ModifyBadRequestBody {
	return o.Payload
}

func (o *ModifyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ModifyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewModifyUnauthorized creates a ModifyUnauthorized with default headers values
func NewModifyUnauthorized() *ModifyUnauthorized {
	return &ModifyUnauthorized{}
}

/* ModifyUnauthorized describes a response with status code 401, with default header values.

ModifyUnauthorized modify unauthorized
*/
type ModifyUnauthorized struct {
	Payload interface{}
}

func (o *ModifyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] modifyUnauthorized  %+v", 401, o.Payload)
}
func (o *ModifyUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ModifyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewModifyForbidden creates a ModifyForbidden with default headers values
func NewModifyForbidden() *ModifyForbidden {
	return &ModifyForbidden{}
}

/* ModifyForbidden describes a response with status code 403, with default header values.

ModifyForbidden modify forbidden
*/
type ModifyForbidden struct {
	Payload *ModifyForbiddenBody
}

func (o *ModifyForbidden) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] modifyForbidden  %+v", 403, o.Payload)
}
func (o *ModifyForbidden) GetPayload() *ModifyForbiddenBody {
	return o.Payload
}

func (o *ModifyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ModifyForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewModifyNotFound creates a ModifyNotFound with default headers values
func NewModifyNotFound() *ModifyNotFound {
	return &ModifyNotFound{}
}

/* ModifyNotFound describes a response with status code 404, with default header values.

ModifyNotFound modify not found
*/
type ModifyNotFound struct {
	Payload *ModifyNotFoundBody
}

func (o *ModifyNotFound) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] modifyNotFound  %+v", 404, o.Payload)
}
func (o *ModifyNotFound) GetPayload() *ModifyNotFoundBody {
	return o.Payload
}

func (o *ModifyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ModifyNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewModifyInternalServerError creates a ModifyInternalServerError with default headers values
func NewModifyInternalServerError() *ModifyInternalServerError {
	return &ModifyInternalServerError{}
}

/* ModifyInternalServerError describes a response with status code 500, with default header values.

ModifyInternalServerError modify internal server error
*/
type ModifyInternalServerError struct {
	Payload interface{}
}

func (o *ModifyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] modifyInternalServerError  %+v", 500, o.Payload)
}
func (o *ModifyInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *ModifyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ModifyBadRequestBody modify bad request body
swagger:model ModifyBadRequestBody
*/
type ModifyBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this modify bad request body
func (o *ModifyBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ModifyBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("modifyBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this modify bad request body based on context it is used
func (o *ModifyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ModifyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ModifyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ModifyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ModifyForbiddenBody modify forbidden body
swagger:model ModifyForbiddenBody
*/
type ModifyForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this modify forbidden body
func (o *ModifyForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ModifyForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("modifyForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this modify forbidden body based on context it is used
func (o *ModifyForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ModifyForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ModifyForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ModifyForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ModifyNotFoundBody modify not found body
swagger:model ModifyNotFoundBody
*/
type ModifyNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this modify not found body
func (o *ModifyNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ModifyNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("modifyNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *ModifyNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("modifyNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this modify not found body based on context it is used
func (o *ModifyNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ModifyNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ModifyNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ModifyNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
