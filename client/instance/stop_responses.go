// Code generated by go-swagger; DO NOT EDIT.

package instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexlb-client-go/models"
)

// StopReader is a Reader for the Stop structure.
type StopReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopOK creates a StopOK with default headers values
func NewStopOK() *StopOK {
	return &StopOK{}
}

/* StopOK describes a response with status code 200, with default header values.

Stop Instance succeeded
*/
type StopOK struct {
	Payload *models.Instance
}

func (o *StopOK) Error() string {
	return fmt.Sprintf("[POST /instances/{name}/stop][%d] stopOK  %+v", 200, o.Payload)
}
func (o *StopOK) GetPayload() *models.Instance {
	return o.Payload
}

func (o *StopOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Instance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopBadRequest creates a StopBadRequest with default headers values
func NewStopBadRequest() *StopBadRequest {
	return &StopBadRequest{}
}

/* StopBadRequest describes a response with status code 400, with default header values.

StopBadRequest stop bad request
*/
type StopBadRequest struct {
	Payload *StopBadRequestBody
}

func (o *StopBadRequest) Error() string {
	return fmt.Sprintf("[POST /instances/{name}/stop][%d] stopBadRequest  %+v", 400, o.Payload)
}
func (o *StopBadRequest) GetPayload() *StopBadRequestBody {
	return o.Payload
}

func (o *StopBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StopBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopUnauthorized creates a StopUnauthorized with default headers values
func NewStopUnauthorized() *StopUnauthorized {
	return &StopUnauthorized{}
}

/* StopUnauthorized describes a response with status code 401, with default header values.

StopUnauthorized stop unauthorized
*/
type StopUnauthorized struct {
	Payload interface{}
}

func (o *StopUnauthorized) Error() string {
	return fmt.Sprintf("[POST /instances/{name}/stop][%d] stopUnauthorized  %+v", 401, o.Payload)
}
func (o *StopUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *StopUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopForbidden creates a StopForbidden with default headers values
func NewStopForbidden() *StopForbidden {
	return &StopForbidden{}
}

/* StopForbidden describes a response with status code 403, with default header values.

StopForbidden stop forbidden
*/
type StopForbidden struct {
	Payload *StopForbiddenBody
}

func (o *StopForbidden) Error() string {
	return fmt.Sprintf("[POST /instances/{name}/stop][%d] stopForbidden  %+v", 403, o.Payload)
}
func (o *StopForbidden) GetPayload() *StopForbiddenBody {
	return o.Payload
}

func (o *StopForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StopForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopNotFound creates a StopNotFound with default headers values
func NewStopNotFound() *StopNotFound {
	return &StopNotFound{}
}

/* StopNotFound describes a response with status code 404, with default header values.

StopNotFound stop not found
*/
type StopNotFound struct {
	Payload *StopNotFoundBody
}

func (o *StopNotFound) Error() string {
	return fmt.Sprintf("[POST /instances/{name}/stop][%d] stopNotFound  %+v", 404, o.Payload)
}
func (o *StopNotFound) GetPayload() *StopNotFoundBody {
	return o.Payload
}

func (o *StopNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StopNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopInternalServerError creates a StopInternalServerError with default headers values
func NewStopInternalServerError() *StopInternalServerError {
	return &StopInternalServerError{}
}

/* StopInternalServerError describes a response with status code 500, with default header values.

StopInternalServerError stop internal server error
*/
type StopInternalServerError struct {
	Payload interface{}
}

func (o *StopInternalServerError) Error() string {
	return fmt.Sprintf("[POST /instances/{name}/stop][%d] stopInternalServerError  %+v", 500, o.Payload)
}
func (o *StopInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *StopInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StopBadRequestBody stop bad request body
swagger:model StopBadRequestBody
*/
type StopBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this stop bad request body
func (o *StopBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StopBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("stopBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stop bad request body based on context it is used
func (o *StopBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StopBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StopBadRequestBody) UnmarshalBinary(b []byte) error {
	var res StopBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StopForbiddenBody stop forbidden body
swagger:model StopForbiddenBody
*/
type StopForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this stop forbidden body
func (o *StopForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StopForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("stopForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stop forbidden body based on context it is used
func (o *StopForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StopForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StopForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StopForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StopNotFoundBody stop not found body
swagger:model StopNotFoundBody
*/
type StopNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this stop not found body
func (o *StopNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StopNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("stopNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *StopNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("stopNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stop not found body based on context it is used
func (o *StopNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StopNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StopNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StopNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
