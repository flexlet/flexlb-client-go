// Code generated by go-swagger; DO NOT EDIT.

package instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexlb-client-go/models"
)

// ListReader is a Reader for the List structure.
type ListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListOK creates a ListOK with default headers values
func NewListOK() *ListOK {
	return &ListOK{}
}

/* ListOK describes a response with status code 200, with default header values.

List Instances succeeded
*/
type ListOK struct {
	Payload []*models.Instance
}

func (o *ListOK) Error() string {
	return fmt.Sprintf("[GET /instances][%d] listOK  %+v", 200, o.Payload)
}
func (o *ListOK) GetPayload() []*models.Instance {
	return o.Payload
}

func (o *ListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBadRequest creates a ListBadRequest with default headers values
func NewListBadRequest() *ListBadRequest {
	return &ListBadRequest{}
}

/* ListBadRequest describes a response with status code 400, with default header values.

ListBadRequest list bad request
*/
type ListBadRequest struct {
	Payload *ListBadRequestBody
}

func (o *ListBadRequest) Error() string {
	return fmt.Sprintf("[GET /instances][%d] listBadRequest  %+v", 400, o.Payload)
}
func (o *ListBadRequest) GetPayload() *ListBadRequestBody {
	return o.Payload
}

func (o *ListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUnauthorized creates a ListUnauthorized with default headers values
func NewListUnauthorized() *ListUnauthorized {
	return &ListUnauthorized{}
}

/* ListUnauthorized describes a response with status code 401, with default header values.

ListUnauthorized list unauthorized
*/
type ListUnauthorized struct {
	Payload interface{}
}

func (o *ListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instances][%d] listUnauthorized  %+v", 401, o.Payload)
}
func (o *ListUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListForbidden creates a ListForbidden with default headers values
func NewListForbidden() *ListForbidden {
	return &ListForbidden{}
}

/* ListForbidden describes a response with status code 403, with default header values.

ListForbidden list forbidden
*/
type ListForbidden struct {
	Payload *ListForbiddenBody
}

func (o *ListForbidden) Error() string {
	return fmt.Sprintf("[GET /instances][%d] listForbidden  %+v", 403, o.Payload)
}
func (o *ListForbidden) GetPayload() *ListForbiddenBody {
	return o.Payload
}

func (o *ListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotFound creates a ListNotFound with default headers values
func NewListNotFound() *ListNotFound {
	return &ListNotFound{}
}

/* ListNotFound describes a response with status code 404, with default header values.

ListNotFound list not found
*/
type ListNotFound struct {
	Payload *ListNotFoundBody
}

func (o *ListNotFound) Error() string {
	return fmt.Sprintf("[GET /instances][%d] listNotFound  %+v", 404, o.Payload)
}
func (o *ListNotFound) GetPayload() *ListNotFoundBody {
	return o.Payload
}

func (o *ListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInternalServerError creates a ListInternalServerError with default headers values
func NewListInternalServerError() *ListInternalServerError {
	return &ListInternalServerError{}
}

/* ListInternalServerError describes a response with status code 500, with default header values.

ListInternalServerError list internal server error
*/
type ListInternalServerError struct {
	Payload interface{}
}

func (o *ListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /instances][%d] listInternalServerError  %+v", 500, o.Payload)
}
func (o *ListInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *ListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListBadRequestBody list bad request body
swagger:model ListBadRequestBody
*/
type ListBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list bad request body
func (o *ListBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list bad request body based on context it is used
func (o *ListBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListForbiddenBody list forbidden body
swagger:model ListForbiddenBody
*/
type ListForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list forbidden body
func (o *ListForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list forbidden body based on context it is used
func (o *ListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListNotFoundBody list not found body
swagger:model ListNotFoundBody
*/
type ListNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this list not found body
func (o *ListNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("listNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *ListNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("listNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list not found body based on context it is used
func (o *ListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
